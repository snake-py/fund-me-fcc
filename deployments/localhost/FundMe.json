{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x556d08da88848536b018da8213700b034b7654ebe1617ec10786d20c5e15d6b6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1038658",
    "logsBloom": "0x
    "blockHash": "0x9bc6fff67440c8832591a99e348b08bf5d2961399ebfa3b0aa747977680ddfcd",
    "transactionHash": "0x556d08da88848536b018da8213700b034b7654ebe1617ec10786d20c5e15d6b6",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1038658",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "944cf1d352145673a429e31c40938820",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Fabio during the course of FCC by Patrick Collins\",\"details\":\"This is just an example to lean Solidity and Chainlink\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This is just an example to lean Solidity and Chainlink\"}},\"title\":\"FundMe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function allows users to send ETH to the contract to fund the owner.\"}},\"notice\":\"This contract allows users to send ETH to the contract to fund the owner.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Note you can import hardhat console.log to print to console for debugging and testing\\n\\n// SPDX-License-Identifier: MIT\\n// 1. pragme\\npragma solidity ^0.8.7;\\n// 2. import\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport './PriceConverter.sol';\\n// 3. errors\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title FundMe\\n * @notice This contract allows users to send ETH to the contract to fund the owner.\\n * @author Fabio during the course of FCC by Patrick Collins\\n * @dev This is just an example to lean Solidity and Chainlink\\n */\\ncontract FundMe {\\n    // 4. Type declarations\\n    // none in this contract\\n\\n    // 5. State variables\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // 6. Events\\n\\n    // 7. Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // 8. Functions\\n    // 8.1. Constructor\\n    // 8.2 receive function\\n    // 8.3 fallback function\\n    // 8.4. External functions\\n    // 8.5. Public functions\\n    // 8.6. Internal functions\\n    // 8.7. Private functions\\n    // 8.8. View / purefunctions\\n\\n    constructor(address priceFeedAdress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAdress);\\n    }\\n\\n    // wil not be tested currently\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function allows users to send ETH to the contract to fund the owner.\\n     * @dev This is just an example to lean Solidity and Chainlink\\n     */\\n    function fund() public payable {\\n        require( // require is mor eexpensive than reverts! Something to keep in mind\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            'You need to spend more ETH!'\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }('');\\n        require(callSuccess, 'Call failed');\\n    }\\n\\n    function cheaperWithDraw() public onlyOwner {\\n        // switched s_funders with a memory variable, so we do not read so often from storage\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }('');\\n        require(callSuccess, 'Call failed');\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xa71d069a4398f1ce18607bbaa09d81942d636477d080b7943f006d810ea54a99\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x18ab99373a707bbc1332708adb9f2c014b3b8f2015c636a9fd46fa74905fa23d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012eb380380620012eb8339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61116c6200017f6000396000818161034f0152818161058f0152610842015261116c6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e81461012e5780639e87a5cd14610159578063b60d428814610184578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d5578063599b4619146100ec5780636b69a592146101035761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ac4565b610305565b6040516100cc9190610cba565b60405180910390f35b3480156100e157600080fd5b506100ea61034d565b005b3480156100f857600080fd5b5061010161058d565b005b34801561010f57600080fd5b50610118610831565b6040516101259190610cba565b60405180910390f35b34801561013a57600080fd5b5061014361083e565b6040516101509190610c44565b60405180910390f35b34801561016557600080fd5b5061016e610866565b60405161017b9190610c5f565b60405180910390f35b61018c6101cb565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610af1565b610890565b6040516101c29190610c44565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d890919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c9a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102999190610cf1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561047d576000600182815481106103f8576103f7611022565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047590610f7b565b9150506103d5565b50600067ffffffffffffffff81111561049957610498611051565b5b6040519080825280602002602001820160405280156104c75781602001602082028036833780820191505090505b50600190805190602001906104dd9291906109b4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050490610c2f565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190610c7a565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610612576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561069657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161064c575b5050505050905060005b81518110156107205760008282815181106106be576106bd611022565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071890610f7b565b9150506106a0565b50600067ffffffffffffffff81111561073c5761073b611051565b5b60405190808252806020026020018201604052801561076a5781602001602082028036833780820191505090505b50600190805190602001906107809291906109b4565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107a790610c2f565b60006040518083038185875af1925050503d80600081146107e4576040519150601f19603f3d011682016040523d82523d6000602084013e6107e9565b606091505b505090508061082d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082490610c7a565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600182815481106108a6576108a5611022565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e483610914565b90506000670de0b6b3a764000085836108fd9190610e8f565b6109079190610d47565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109959190610b1e565b5050509150506402540be400816109ac9190610d78565b915050919050565b828054828255906000526020600020908101928215610a2d579160200282015b82811115610a2c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d4565b5b509050610a3a9190610a3e565b5090565b5b80821115610a57576000816000905550600101610a3f565b5090565b600081359050610a6a816110da565b92915050565b600081519050610a7f816110f1565b92915050565b600081359050610a9481611108565b92915050565b600081519050610aa981611108565b92915050565b600081519050610abe8161111f565b92915050565b600060208284031215610ada57610ad9611080565b5b6000610ae884828501610a5b565b91505092915050565b600060208284031215610b0757610b06611080565b5b6000610b1584828501610a85565b91505092915050565b600080600080600060a08688031215610b3a57610b39611080565b5b6000610b4888828901610aaf565b9550506020610b5988828901610a70565b9450506040610b6a88828901610a9a565b9350506060610b7b88828901610a9a565b9250506080610b8c88828901610aaf565b9150509295509295909350565b610ba281610ee9565b82525050565b610bb181610f45565b82525050565b6000610bc4600b83610ce0565b9150610bcf82611085565b602082019050919050565b6000610be7601b83610ce0565b9150610bf2826110ae565b602082019050919050565b6000610c0a600083610cd5565b9150610c15826110d7565b600082019050919050565b610c2981610f25565b82525050565b6000610c3a82610bfd565b9150819050919050565b6000602082019050610c596000830184610b99565b92915050565b6000602082019050610c746000830184610ba8565b92915050565b60006020820190508181036000830152610c9381610bb7565b9050919050565b60006020820190508181036000830152610cb381610bda565b9050919050565b6000602082019050610ccf6000830184610c20565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cfc82610f25565b9150610d0783610f25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3c57610d3b610fc4565b5b828201905092915050565b6000610d5282610f25565b9150610d5d83610f25565b925082610d6d57610d6c610ff3565b5b828204905092915050565b6000610d8382610efb565b9150610d8e83610efb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dcd57610dcc610fc4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e0a57610e09610fc4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e4757610e46610fc4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e8457610e83610fc4565b5b828202905092915050565b6000610e9a82610f25565b9150610ea583610f25565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ede57610edd610fc4565b5b828202905092915050565b6000610ef482610f05565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f5082610f57565b9050919050565b6000610f6282610f69565b9050919050565b6000610f7482610f05565b9050919050565b6000610f8682610f25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fb957610fb8610fc4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110e381610ee9565b81146110ee57600080fd5b50565b6110fa81610efb565b811461110557600080fd5b50565b61111181610f25565b811461111c57600080fd5b50565b61112881610f2f565b811461113357600080fd5b5056fea2646970667358221220a6ac69705ac1cc35556f283c3a4dbbdabcc1ba45e4235b915f6390e99c66f2cd64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e81461012e5780639e87a5cd14610159578063b60d428814610184578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d5578063599b4619146100ec5780636b69a592146101035761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ac4565b610305565b6040516100cc9190610cba565b60405180910390f35b3480156100e157600080fd5b506100ea61034d565b005b3480156100f857600080fd5b5061010161058d565b005b34801561010f57600080fd5b50610118610831565b6040516101259190610cba565b60405180910390f35b34801561013a57600080fd5b5061014361083e565b6040516101509190610c44565b60405180910390f35b34801561016557600080fd5b5061016e610866565b60405161017b9190610c5f565b60405180910390f35b61018c6101cb565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610af1565b610890565b6040516101c29190610c44565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d890919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c9a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102999190610cf1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561047d576000600182815481106103f8576103f7611022565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047590610f7b565b9150506103d5565b50600067ffffffffffffffff81111561049957610498611051565b5b6040519080825280602002602001820160405280156104c75781602001602082028036833780820191505090505b50600190805190602001906104dd9291906109b4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050490610c2f565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190610c7a565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610612576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561069657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161064c575b5050505050905060005b81518110156107205760008282815181106106be576106bd611022565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071890610f7b565b9150506106a0565b50600067ffffffffffffffff81111561073c5761073b611051565b5b60405190808252806020026020018201604052801561076a5781602001602082028036833780820191505090505b50600190805190602001906107809291906109b4565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107a790610c2f565b60006040518083038185875af1925050503d80600081146107e4576040519150601f19603f3d011682016040523d82523d6000602084013e6107e9565b606091505b505090508061082d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082490610c7a565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600182815481106108a6576108a5611022565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e483610914565b90506000670de0b6b3a764000085836108fd9190610e8f565b6109079190610d47565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109959190610b1e565b5050509150506402540be400816109ac9190610d78565b915050919050565b828054828255906000526020600020908101928215610a2d579160200282015b82811115610a2c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d4565b5b509050610a3a9190610a3e565b5090565b5b80821115610a57576000816000905550600101610a3f565b5090565b600081359050610a6a816110da565b92915050565b600081519050610a7f816110f1565b92915050565b600081359050610a9481611108565b92915050565b600081519050610aa981611108565b92915050565b600081519050610abe8161111f565b92915050565b600060208284031215610ada57610ad9611080565b5b6000610ae884828501610a5b565b91505092915050565b600060208284031215610b0757610b06611080565b5b6000610b1584828501610a85565b91505092915050565b600080600080600060a08688031215610b3a57610b39611080565b5b6000610b4888828901610aaf565b9550506020610b5988828901610a70565b9450506040610b6a88828901610a9a565b9350506060610b7b88828901610a9a565b9250506080610b8c88828901610aaf565b9150509295509295909350565b610ba281610ee9565b82525050565b610bb181610f45565b82525050565b6000610bc4600b83610ce0565b9150610bcf82611085565b602082019050919050565b6000610be7601b83610ce0565b9150610bf2826110ae565b602082019050919050565b6000610c0a600083610cd5565b9150610c15826110d7565b600082019050919050565b610c2981610f25565b82525050565b6000610c3a82610bfd565b9150819050919050565b6000602082019050610c596000830184610b99565b92915050565b6000602082019050610c746000830184610ba8565b92915050565b60006020820190508181036000830152610c9381610bb7565b9050919050565b60006020820190508181036000830152610cb381610bda565b9050919050565b6000602082019050610ccf6000830184610c20565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cfc82610f25565b9150610d0783610f25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3c57610d3b610fc4565b5b828201905092915050565b6000610d5282610f25565b9150610d5d83610f25565b925082610d6d57610d6c610ff3565b5b828204905092915050565b6000610d8382610efb565b9150610d8e83610efb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dcd57610dcc610fc4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e0a57610e09610fc4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e4757610e46610fc4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e8457610e83610fc4565b5b828202905092915050565b6000610e9a82610f25565b9150610ea583610f25565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ede57610edd610fc4565b5b828202905092915050565b6000610ef482610f05565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f5082610f57565b9050919050565b6000610f6282610f69565b9050919050565b6000610f7482610f05565b9050919050565b6000610f8682610f25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fb957610fb8610fc4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110e381610ee9565b81146110ee57600080fd5b50565b6110fa81610efb565b811461110557600080fd5b50565b61111181610f25565b811461111c57600080fd5b50565b61112881610f2f565b811461113357600080fd5b5056fea2646970667358221220a6ac69705ac1cc35556f283c3a4dbbdabcc1ba45e4235b915f6390e99c66f2cd64736f6c63430008070033",
  "devdoc": {
    "author": "Fabio during the course of FCC by Patrick Collins",
    "details": "This is just an example to lean Solidity and Chainlink",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This is just an example to lean Solidity and Chainlink"
      }
    },
    "title": "FundMe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function allows users to send ETH to the contract to fund the owner."
      }
    },
    "notice": "This contract allows users to send ETH to the contract to fund the owner.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}